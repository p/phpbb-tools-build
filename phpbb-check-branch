#!/usr/bin/env perl
package PHPBB::Git;

use strict;
use warnings;

sub commits_in_branch($) {
    my ($branch) = @_;
    my @commits_in_branch = ();
    
    open CMD, qq/git log --pretty=oneline "$branch" |/;
    while (<CMD>) {
        my @parts = split ' ', $_, 2;
        my $sha = $parts[0];
        push @commits_in_branch, $sha;
    }
    close CMD;
    
    @commits_in_branch;
}

sub shortlog($) {
    my ($branch) = @_;
    my @commits_in_branch = ();
    my %meta = ();
    
    open CMD, qq/git log --pretty=oneline "$branch" |/;
    while (<CMD>) {
        my @parts = split ' ', $_, 2;
        my $sha = $parts[0];
        push @commits_in_branch, $sha;
        $meta{$sha} = $parts[1];
    }
    close CMD;
    
    (\@commits_in_branch, \%meta);
}

sub head_commit($) {
    my ($branch) = @_;
    my $head_commit;
    
    open CMD, qq/git log --pretty=oneline -1 "$branch" |/;
    while (<CMD>) {
        my @parts = split ' ';
        $head_commit = $parts[0];
    }
    close CMD;
    
    $head_commit;
}

sub determine_base {
    my ($branch, $prefix, $branch_commits) = @_;
    my @branch_commits;
    unless (defined $prefix) {
        $prefix = '';
    }
    if (defined $branch_commits) {
        @branch_commits = @{$branch_commits};
    } else {
        @branch_commits = commits_in_branch($branch);
    }
    # Important: base list should be arranged in the same order
    # in which merges are done.
    my @bases = qw/develop-olympus develop/;
    my %base_commits = ();
    for my $base (@bases) {
        my @commits = commits_in_branch($prefix . $base);
        my %commits_hash = ();
        for (@commits) {
            $commits_hash{$_} = 1;
        }
        $base_commits{$base} = \%commits_hash;
    }
    
    for my $sha (@branch_commits) {
        for my $base (@bases) {
            if ($base_commits{$base}->{$sha}) {
                return $prefix . $base;
            }
        }
    }
    undef;
}

1;
package PHPBB::Checker;

use strict;
use warnings;

sub check_line($$) {
    my ($sha, $line) = @_;
    my @faults;
    my $length = length $line;
    if ($length >= 80) {
        push @faults, "In $sha: line is ${length} chars long: $line";
    }
    @faults;
}

sub check_commit($) {
    my ($sha) = @_;
    my (@faults, @sub_faults) = (), ();
    open CMD, qq/git show $sha -s --pretty=medium |/;
    my (@header_lines, @message_lines) = (), ();
    my $in_header = 1;
    while (<CMD>) {
        if ($in_header) {
            if (/^$/) {
                $in_header = 0;
            } else {
                push @header_lines, $_;
            }
        } else {
            my $line;
            if (length($_) > 4) {
                $line = substr($_, 4);
            } else {
                $line = $_;
            }
            push @message_lines, $line;
        }
    }
    close CMD;
    
    if (grep /^Merge/, @header_lines) {
        # merge commit
        goto quit;
    }
    
    my $subject = $message_lines[0];
    @sub_faults = check_line $sha, $subject;
    for (@sub_faults) {
        push @faults, $_;
    }
    my $space = $message_lines[1];
    unless (defined $space) {
        push @faults, "In $sha: commit message is only one line";
        goto quit;
    }
    unless ($subject =~ /^\[(ticket|task|feature)\/([\w\-]+)\]/) {
        push @faults, "In $sha: commit message subject has incorrect prefix: $subject";
        goto quit;
    }
    my $main_ticket;
    if ($1 eq 'ticket') {
        $main_ticket = $2;
        unless ($main_ticket =~ /^\d+$/) {
            push @faults, "In $sha: ticket/ prefix is used but ticket number is invalid: $subject";
        }
    }
    if ($space !~ /^\s*$/) {
        push @faults, "In $sha: second line of commit message is not space: $space";
        goto quit;
    }
    my @body_lines = @message_lines;
    shift @body_lines;
    for (@body_lines) {
        @sub_faults = check_line $sha, $_;
        for (@sub_faults) {
            push @faults, $_;
        }
    }
    my $ticket_ok = 0;
    my @ticket_numbers = ();
    for my $line (reverse @message_lines) {
        if ($line =~ /^PHPBB3-(\d+)$/) {
            push @ticket_numbers, $1;
            if ($ticket_ok) {
                push @faults, "In $sha: ticket reference too early: $line";
            } else {
                $ticket_ok = 1;
            }
        } elsif ($line =~ /^\s+$/) {
            # skip
        } else {
            unless ($ticket_ok) {
                push @faults, "In $sha: ticket reference missing";
                goto quit;
            }
        }
    }
    if ($main_ticket) {
        unless (grep /^$main_ticket$/, @ticket_numbers) {
            push @faults, "In $sha: main ticket $main_ticket is not mentioned in commit message footer";
        }
    }
    
    quit:
    @faults;
}

1;
#!/usr/bin/env perl

package main;

use strict;
use warnings;



my $branch = shift @ARGV;
my $into_prefix = '';

unless ($branch) {
    $branch = 'HEAD';
    $into_prefix = 'upstream/';
}

my ($branch_commits, $branch_meta) = PHPBB::Git::shortlog($branch);
my @branch_commits = @{$branch_commits};
my $into = PHPBB::Git::determine_base($branch, $into_prefix, \@branch_commits);

die "Could not determine merge target" unless $into;

print "Checking $branch for merge into $into\n";

my @base_commits = PHPBB::Git::commits_in_branch($into);
my %base_hash = ();
foreach my $sha (@base_commits) {
    $base_hash{$sha} = 1;
}
my @delta_commits = ();
foreach my $sha (@branch_commits) {
    unless ($base_hash{$sha}) {
        push @delta_commits, $sha;
    }
}

print "Commits:\n";
foreach my $sha (@delta_commits) {
    print $branch_meta->{$sha};
}

foreach my $sha (@delta_commits) {
    my @faults = PHPBB::Checker::check_commit $sha;
    for (@faults) {
        print;
        print "\n";
    }
}
